"""
3D Printing Recycling Network Optimization
==========================================

This module implements a machine learning-enhanced optimization model for designing
a 3D printing recycling network. It combines neural network regression with 
mixed-integer programming using Gurobi optimization.

The model optimizes facility location decisions across:
- 3D Printing Centers (DPCs)
- Treatment Centers (TCs) 
- Recycling Centers (RCs)
- Processing Centers (PCs)
- Collection Centers (CCs)

Author: [Your Name]
Date: [Current Date]
License: [Your License]
"""

import gurobipy
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import time
from gurobipy import Model, GRB
from sklearn.model_selection import train_test_split
from gurobi_ml import add_predictor_constr
from sklearn.neural_network import MLPRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


class NetworkOptimizer:
    """
    A class for optimizing 3D printing recycling network facility locations
    using machine learning enhanced optimization.
    """
    
    def __init__(self, config=None):
        """
        Initialize the network optimizer with configuration parameters.
        
        Args:
            config (dict): Configuration dictionary with model parameters
        """
        # Network structure parameters
        self.I = 4   # Number of 3D Printing Centers (DPCs)
        self.J = 4   # Number of Treatment Centers (TCs)
        self.K = 8   # Number of Recycling Centers (RCs)
        self.T = 6   # Number of Processing Centers (PCs)
        self.L = 4   # Number of Collection Centers (CCs)
        
        # Additional network parameters (for future extensions)
        self.N = 16  # Number of Filament Customers
        self.M = 5   # Number of Markets
        self.E = 20  # Number of End-users
        self.S = 100 # Supply parameter
        
        # Fixed costs for each facility type
        self.facility_costs = self._initialize_facility_costs()
        
        # ML model parameters
        self.ml_config = {
            'hidden_layers': [18] * 7,
            'activation': 'relu',
            'max_iter': 850,
            'alpha': 0.0012,
            'random_state': 42,
            'train_size': 0.8
        }
        
        # Results storage
        self.model = None
        self.ml_pipeline = None
        self.optimization_results = {}
        self.ml_metrics = {}
        
    def _initialize_facility_costs(self):
        """Initialize fixed costs for different facility types."""
        return {
            'treatment_centers': [212.36, 385.21, 319.60, 279.60, 146.81, 146.80],
            'printing_centers': [529.04, 933.09, 800.56, 854.04, 510.29, 984.95, 
                               916.22, 606.17, 590.91, 591.70],
            'recycling_centers': [321.70, 409.90, 372.78, 316.49, 444.74, 255.80,
                                316.86, 346.54, 382.43, 514.07, 279.87, 405.69],
            'processing_centers': [159.24, 104.65, 160.75, 117.05, 106.51, 194.89,
                                 196.56, 180.84, 130.46, 109.77],
            'collection_centers': [168.42, 144.02, 112.20, 149.52, 103.44, 190.93,
                                 125.88, 166.25, 131.17, 152.01]
        }
    
    def load_data(self, x_file_path, y_file_path):
        """
        Load training data from CSV files.
        
        Args:
            x_file_path (str): Path to input features CSV file
            y_file_path (str): Path to target values CSV file
            
        Returns:
            tuple: (X_data, y_data) as numpy arrays
        """
        try:
            X_data = pd.read_csv(x_file_path, header=None).values
            y_data = pd.read_csv(y_file_path, header=None).values.ravel()
            
            print(f"Data loaded successfully:")
            print(f"  Features shape: {X_data.shape}")
            print(f"  Targets shape: {y_data.shape}")
            
            return X_data, y_data
            
        except FileNotFoundError as e:
            print(f"Error loading data: {e}")
            raise
        except Exception as e:
            print(f"Unexpected error loading data: {e}")
            raise
    
    def train_ml_model(self, X_data, y_data):
        """
        Train the machine learning model for cost prediction.
        
        Args:
            X_data (np.array): Input features
            y_data (np.array): Target values
            
        Returns:
            dict: Training metrics (R2 score, MAPE)
        """
        print("Training machine learning model...")
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            X_data, y_data, 
            train_size=self.ml_config['train_size'], 
            random_state=self.ml_config['random_state']
        )
        
        # Create and train model
        regression = MLPRegressor(
            hidden_layer_sizes=self.ml_config['hidden_layers'],
            activation=self.ml_config['activation'],
            max_iter=self.ml_config['max_iter'],
            alpha=self.ml_config['alpha'],
            random_state=self.ml_config['random_state']
        )
        
        self.ml_pipeline = make_pipeline(PolynomialFeatures(), regression)
        self.ml_pipeline.fit(X_train, y_train)
        
        # Calculate metrics
        y_pred_test = self.ml_pipeline.predict(X_test)
        y_pred_train = self.ml_pipeline.predict(X_train)
        
        self.ml_metrics = {
            'r2_score': metrics.r2_score(y_test, y_pred_test),
            'mape_train': np.mean(np.abs((y_train - y_pred_train) / y_train)) * 100,
            'mape_test': np.mean(np.abs((y_test - y_pred_test) / y_test)) * 100,
            'regression_model': regression,
            'test_data': (X_test, y_test, y_pred_test),
            'train_data': (X_train, y_train, y_pred_train)
        }
        
        print(f"ML Model Training Results:")
        print(f"  RÂ² Score: {self.ml_metrics['r2_score']:.4f}")
        print(f"  MAPE Train: {self.ml_metrics['mape_train']:.2f}%")
        print(f"  MAPE Test: {self.ml_metrics['mape_test']:.2f}%")
        
        return self.ml_metrics
    
    def build_optimization_model(self):
        """
        Build the Gurobi optimization model with ML constraints.
        
        Returns:
            gurobipy.Model: The constructed optimization model
        """
        print("Building optimization model...")
        
        if self.ml_pipeline is None:
            raise ValueError("ML model must be trained before building optimization model")
        
        # Initialize model
        self.model = Model("3D_Printing_Recycling_Network")
        
        # Decision variables
        total_facilities = self.I + self.J + self.K + self.T + self.L
        x = self.model.addVars(total_facilities, vtype=GRB.BINARY, name="x")
        y_approx = self.model.addVar(lb=-GRB.INFINITY, name="y_ml_prediction")
        
        # Objective function components
        f1 = self._build_facility_cost_objective(x)
        
        # Set objective: minimize facility costs + ML predicted costs
        self.model.setObjective(f1 + y_approx, GRB.MINIMIZE)
        
        # Add ML predictor constraint
        pred_constr = add_predictor_constr(self.model, self.ml_pipeline, x, y_approx)
        
        # Add facility selection constraints (at least one of each type)
        self._add_facility_constraints(x)
        
        print("Optimization model built successfully")
        return self.model
    
    def _build_facility_cost_objective(self, x):
        """Build the facility cost component of the objective function."""
        costs = self.facility_costs
        
        f1 = (
            # 3D Printing Centers costs
            sum(costs['printing_centers'][i] * x[i] for i in range(self.I)) +
            # Treatment Centers costs  
            sum(costs['treatment_centers'][j] * x[self.I + j] for j in range(self.J)) +
            # Recycling Centers costs
            sum(costs['recycling_centers'][k] * x[self.I + self.J + k] for k in range(self.K)) +
            # Processing Centers costs
            sum(costs['processing_centers'][t] * x[self.I + self.J + self.K + t] for t in range(self.T)) +
            # Collection Centers costs
            sum(costs['collection_centers'][l] * x[self.I + self.J + self.K + self.T + l] for l in range(self.L))
        )
        
        return f1
    
    def _add_facility_constraints(self, x):
        """Add constraints ensuring at least one facility of each type is selected."""
        # At least one 3D Printing Center
        self.model.addConstr(sum(x[i] for i in range(self.I)) >= 1, name="min_printing_centers")
        
        # At least one Treatment Center
        self.model.addConstr(sum(x[self.I + j] for j in range(self.J)) >= 1, name="min_treatment_centers")
        
        # At least one Recycling Center
        self.model.addConstr(sum(x[self.I + self.J + k] for k in range(self.K)) >= 1, name="min_recycling_centers")
        
        # At least one Processing Center
        self.model.addConstr(sum(x[self.I + self.J + self.K + t] for t in range(self.T)) >= 1, name="min_processing_centers")
        
        # At least one Collection Center
        self.model.addConstr(sum(x[self.I + self.J + self.K + self.T + l] for l in range(self.L)) >= 1, name="min_collection_centers")
    
    def solve_optimization(self):
        """
        Solve the optimization model and store results.
        
        Returns:
            dict: Optimization results and solution details
        """
        if self.model is None:
            raise ValueError("Optimization model must be built before solving")
        
        print("Solving optimization model...")
        start_time = time.time()
        
        # Solve the model
        self.model.optimize()
        
        solve_time = time.time() - start_time
        
        if self.model.status == GRB.OPTIMAL:
            # Extract and process solution
            self.optimization_results = self._extract_solution_details(solve_time)
            self._print_solution_summary()
            return self.optimization_results
        else:
            print(f"Optimization failed with status: {self.model.status}")
            return None
    
    def _extract_solution_details(self, solve_time):
        """Extract detailed solution information from the solved model."""
        # Extract decision variables
        x_values = {}
        for var in self.model.getVars():
            if "x" in var.varName and var.x != 0:
                # Parse variable index
                idx_str = var.varName.split('[')[1].split(']')[0]
                if ',' in idx_str:
                    idx = tuple(map(int, idx_str.split(',')))
                else:
                    idx = (int(idx_str),)
                x_values[idx] = var.x
        
        # Organize facility selections
        U_i = [x_values.get((i,), 0.0) for i in range(self.I)]
        Y_j = [x_values.get((self.I + j,), 0.0) for j in range(self.J)]
        V_k = [x_values.get((self.I + self.J + k,), 0.0) for k in range(self.K)]
        X_t = [x_values.get((self.I + self.J + self.K + t,), 0.0) for t in range(self.T)]
        G_l = [x_values.get((self.I + self.J + self.K + self.T + l,), 0.0) for l in range(self.L)]
        
        # Get ML prediction value
        y_ml = None
        for var in self.model.getVars():
            if var.varName == "y_ml_prediction":
                y_ml = var.x
                break
        
        # Calculate cost components
        costs = self.facility_costs
        cost_breakdown = {
            'printing_centers': sum(costs['printing_centers'][i] * U_i[i] for i in range(self.I)),
            'treatment_centers': sum(costs['treatment_centers'][j] * Y_j[j] for j in range(self.J)),
            'recycling_centers': sum(costs['recycling_centers'][k] * V_k[k] for k in range(self.K)),
            'processing_centers': sum(costs['processing_centers'][t] * X_t[t] for t in range(self.T)),
            'collection_centers': sum(costs['collection_centers'][l] * G_l[l] for l in range(self.L))
        }
        
        return {
            'facility_selections': {
                'printing_centers': U_i,
                'treatment_centers': Y_j,
                'recycling_centers': V_k,
                'processing_centers': X_t,
                'collection_centers': G_l
            },
            'selected_indices': {
                'printing_centers': [i for i, val in enumerate(U_i) if val == 1.0],
                'treatment_centers': [j for j, val in enumerate(Y_j) if val == 1.0],
                'recycling_centers': [k for k, val in enumerate(V_k) if val == 1.0],
                'processing_centers': [t for t, val in enumerate(X_t) if val == 1.0],
                'collection_centers': [l for l, val in enumerate(G_l) if val == 1.0]
            },
            'cost_breakdown': cost_breakdown,
            'total_facility_cost': sum(cost_breakdown.values()),
            'ml_prediction': y_ml,
            'total_objective': self.model.ObjVal,
            'optimality_gap': 100 * (self.model.ObjBound - self.model.ObjVal) / abs(self.model.ObjVal),
            'solve_time': solve_time,
            'num_variables': self.model.NumVars,
            'num_constraints': self.model.NumConstrs
        }
    
    def _print_solution_summary(self):
        """Print a summary of the optimization solution."""
        results = self.optimization_results
        
        print("\n" + "="*60)
        print("OPTIMIZATION RESULTS SUMMARY")
        print("="*60)
        
        print(f"Total Objective Value: ${results['total_objective']:,.2f}")
        print(f"Facility Costs: ${results['total_facility_cost']:,.2f}")
        print(f"ML Prediction: {results['ml_prediction']:,.2f}")
        print(f"Optimality Gap: {results['optimality_gap']:.2f}%")
        print(f"Solve Time: {results['solve_time']:.2f} seconds")
        
        print(f"\nFacility Selection Summary:")
        for facility_type, indices in results['selected_indices'].items():
            print(f"  {facility_type.replace('_', ' ').title()}: {len(indices)} facilities selected")
            if indices:
                print(f"    Indices: {indices}")
        
        print(f"\nCost Breakdown:")
        for facility_type, cost in results['cost_breakdown'].items():
            print(f"  {facility_type.replace('_', ' ').title()}: ${cost:,.2f}")
    
    def create_visualizations(self):
        """Create comprehensive visualizations of the results."""
        if not self.ml_metrics or not self.optimization_results:
            print("No results available for visualization. Run optimization first.")
            return
        
        print("Creating visualizations...")
        
        # Set style for better plots
        plt.style.use('default')
        sns.set_palette("husl")
        
        # Create ML performance plots
        self._plot_ml_performance()
        
        # Create optimization results plots  
        self._plot_optimization_results()
        
        print("All visualizations created successfully!")
    
    def _plot_ml_performance(self):
        """Create machine learning performance visualizations."""
        X_test, y_test, y_pred = self.ml_metrics['test_data']
        X_train, y_train, y_pred_train = self.ml_metrics['train_data']
        regression = self.ml_metrics['regression_model']
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Machine Learning Model Performance', fontsize=16, fontweight='bold')
        
        # 1. Learning Curve
        if hasattr(regression, 'loss_curve_'):
            epochs = range(1, len(regression.loss_curve_) + 1)
            ax1.plot(epochs, regression.loss_curve_, 'b-', linewidth=2)
            ax1.set_xlabel('Epochs')
            ax1.set_ylabel('Training Loss')
            ax1.set_title('Learning Curve')
            ax1.grid(True, alpha=0.3)
        
        # 2. Predicted vs Actual
        ax2.scatter(y_test, y_pred, alpha=0.6, color='blue', edgecolors='black', s=50)
        min_val, max_val = min(y_test.min(), y_pred.min()), max(y_test.max(), y_pred.max())
        ax2.plot([min_val, max_val], [min_val, max_val], 'r--', linewidth=2, label='Perfect Fit')
        ax2.set_xlabel('Actual Values')
        ax2.set_ylabel('Predicted Values')
        ax2.set_title(f'Predicted vs Actual (RÂ² = {self.ml_metrics["r2_score"]:.3f})')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # 3. Residual Distribution
        residuals = y_test - y_pred
        ax3.hist(residuals, bins=30, color='purple', alpha=0.7, edgecolor='black')
        ax3.set_xlabel('Residuals (Actual - Predicted)')
        ax3.set_ylabel('Frequency')
        ax3.set_title('Residual Distribution')
        ax3.grid(True, alpha=0.3)
        
        # 4. Q-Q Plot
        stats.probplot(residuals, dist="norm", plot=ax4)
        ax4.set_title('Q-Q Plot of Residuals')
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def _plot_optimization_results(self):
        """Create optimization results visualizations."""
        results = self.optimization_results
        
        facility_types = ['3D Printing\nCenters', 'Treatment\nCenters', 'Recycling\nCenters', 
                         'Processing\nCenters', 'Collection\nCenters']
        
        # Facility counts
        facility_counts = [
            len(results['selected_indices']['printing_centers']),
            len(results['selected_indices']['treatment_centers']), 
            len(results['selected_indices']['recycling_centers']),
            len(results['selected_indices']['processing_centers']),
            len(results['selected_indices']['collection_centers'])
        ]
        
        # Cost contributions
        cost_contributions = [
            results['cost_breakdown']['printing_centers'],
            results['cost_breakdown']['treatment_centers'],
            results['cost_breakdown']['recycling_centers'], 
            results['cost_breakdown']['processing_centers'],
            results['cost_breakdown']['collection_centers']
        ]
        
        # Create subplots
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Optimization Results Analysis', fontsize=16, fontweight='bold')
        
        colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0']
        
        # 1. Facility counts
        bars1 = ax1.bar(facility_types, facility_counts, color=colors, alpha=0.8, edgecolor='black')
        ax1.set_title('Number of Selected Facilities by Type')
        ax1.set_ylabel('Number of Facilities')
        ax1.grid(axis='y', alpha=0.3)
        
        # Add value labels on bars
        for bar, count in zip(bars1, facility_counts):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                    f'{count}', ha='center', va='bottom', fontweight='bold')
        
        # 2. Cost breakdown (bar chart)
        bars2 = ax2.bar(facility_types, cost_contributions, color=colors, alpha=0.8, edgecolor='black')
        ax2.set_title('Cost Contribution by Facility Type')
        ax2.set_ylabel('Cost ($)')
        ax2.grid(axis='y', alpha=0.3)
        
        # Add value labels
        for bar, cost in zip(bars2, cost_contributions):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + max(cost_contributions)*0.01,
                    f'${cost:.0f}', ha='center', va='bottom', fontweight='bold')
        
        # 3. Cost breakdown (pie chart)
        wedges, texts, autotexts = ax3.pie(cost_contributions, labels=facility_types, autopct='%1.1f%%', 
                                          colors=colors, startangle=90)
        ax3.set_title('Cost Distribution by Facility Type')
        
        # 4. Utilization rates
        max_facilities = [self.I, self.J, self.K, self.T, self.L]
        utilization_rates = [count/max_fac for count, max_fac in zip(facility_counts, max_facilities)]
        
        bars4 = ax4.bar(facility_types, utilization_rates, color=colors, alpha=0.8, edgecolor='black')
        ax4.set_title('Facility Utilization Rates')
        ax4.set_ylabel('Utilization Rate')
        ax4.set_ylim(0, 1)
        ax4.grid(axis='y', alpha=0.3)
        
        # Add percentage labels
        for bar, rate in zip(bars4, utilization_rates):
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                    f'{rate:.1%}', ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        plt.show()
    
    def save_results(self, output_dir="results"):
        """
        Save optimization and ML results to files.
        
        Args:
            output_dir (str): Directory to save results
        """
        import os
        import json
        
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
        
        # Save optimization results
        if self.optimization_results:
            results_file = os.path.join(output_dir, "optimization_results.json")
            with open(results_file, 'w') as f:
                # Convert numpy types to Python types for JSON serialization
                serializable_results = {}
                for key, value in self.optimization_results.items():
                    if isinstance(value, dict):
                        serializable_results[key] = {k: (v.tolist() if hasattr(v, 'tolist') else v) 
                                                   for k, v in value.items()}
                    else:
                        serializable_results[key] = value.tolist() if hasattr(value, 'tolist') else value
                
                json.dump(serializable_results, f, indent=2)
            print(f"Optimization results saved to {results_file}")
        
        # Save ML metrics
        if self.ml_metrics:
            ml_results = {
                'r2_score': self.ml_metrics['r2_score'],
                'mape_train': self.ml_metrics['mape_train'],
                'mape_test': self.ml_metrics['mape_test']
            }
            ml_file = os.path.join(output_dir, "ml_metrics.json")
            with open(ml_file, 'w') as f:
                json.dump(ml_results, f, indent=2)
            print(f"ML metrics saved to {ml_file}")


def main():
    """
    Main execution function demonstrating the complete workflow.
    """
    print("3D Printing Recycling Network Optimization")
    print("=" * 50)
    
    # Initialize optimizer
    optimizer = NetworkOptimizer()
    
    # Note: Update these paths to your actual data files
    x_file_path = "X_data20.csv"  # Update this path
    y_file_path = "y_data20.csv"  # Update this path
    
    try:
        # Load data
        X_data, y_data = optimizer.load_data(x_file_path, y_file_path)
        
        # Train ML model
        optimizer.train_ml_model(X_data, y_data)
        
        # Build and solve optimization model
        optimizer.build_optimization_model()
        optimizer.solve_optimization()
        
        # Create visualizations
        optimizer.create_visualizations()
        
        # Save results
        optimizer.save_results()
        
        print("\nOptimization completed successfully!")
        
    except FileNotFoundError:
        print(f"Data files not found. Please ensure {x_file_path} and {y_file_path} exist.")
        print("You can update the file paths in the main() function.")
    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
